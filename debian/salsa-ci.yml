# Inlude Salsa-CI as a base
include:
  - https://salsa.debian.org/salsa-ci-team/pipeline/raw/master/salsa-ci.yml
  - https://salsa.debian.org/salsa-ci-team/pipeline/raw/master/pipeline-jobs.yml

# Overridfe Salsa-CI with MariaDB specific variations
variables:
  DEB_BUILD_OPTIONS: "nocheck noautodbgsym"
  RELEASE: sid
  SALSA_CI_DISABLE_REPROTEST: 1
  SALSA_CI_DISABLE_MISSING_BREAKS: 0
  SALSA_CI_DISABLE_RC_BUGS: 0

stages:
  - pre-test
  - build
  - test
  - upgrade in Sid
  - upgrade from Buster/Stretch
  - upgrade extras
  - test extras
  - publish # Stage referenced by Salsa-CI template aptly stanza, so must exist even though not used

gnitpick:
  stage: pre-test
  image: debian:sid
  script:
    # Actual Gnitpick part
    - apt-get update -qq && apt-get -qq install --no-install-recommends --yes ca-certificates curl python3-minimal git # Bare minimal (<4MB) for apt-key and gnitpick to work
    - curl -sS https://raw.githubusercontent.com/Seravo/gnitpick/master/gnitpick.py -o /usr/bin/gnitpick; chmod +x /usr/bin/gnitpick
    - gnitpick --target-repository https://salsa.debian.org/mariadb-team/mariadb-10.5.git
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

build:
  extends: .build-package
  script: &gbp-buildpackage-script
    # salsa-ci-team/pipeline#104
    - rm -rf '$CI_PROJECT_DIR'
    # salsa-ci-team/pipeline#107
    - rm -rf ${CI_PROJECT_DIR}/debian/output/.ccache
    - mkdir -p ${WORKING_DIR} ${CCACHE_WORK_DIR}
    - mv ${CCACHE_WORK_DIR} ${CCACHE_TMP_DIR}
    - gbp pull --ignore-branch --pristine-tar --track-missing
    - |
      mkdir -p ${WORKING_DIR}
      # Check if we can obtain the orig from the git branches
      if ! gbp export-orig --pristine-tar --tarball-dir=${WORKING_DIR}; then
        # Fallback using origtargz
        origtargz -dt
        mv ../*.orig.* ${WORKING_DIR}
      fi
    - gbp buildpackage --git-ignore-branch --git-ignore-new --git-no-create-orig --git-overlay --git-export-dir=${WORKING_DIR} --git-builder="docker-build.sh ${SALSA_CI_IMAGES_DOCKERBUILDER}" |& filter-output
    - du -shc ${WORKING_DIR}/* # Show total file size of artifacts. Must stay are under 100 MB.
    - mv ${CCACHE_TMP_DIR} ${CCACHE_WORK_DIR}

build buster-backports:
  extends: .build-package
  script:
    - *gbp-buildpackage-script
  variables:
      RELEASE: buster-backports

build stretch-backports:
  extends: .build-package
  script:
    - *gbp-buildpackage-script
  variables:
     RELEASE: stretch-backports

# Temporairly allow failure in the test above since there seems to be a bug in mtr
autopkgtest:
  extends: .test-autopkgtest
  allow_failure: true

piuparts:
  extends: .test-piuparts
  stage: test extras

blhc:
  extends: .test-blhc
  stage: test extras
  dependencies:
    - build

# In addition to Salsa-CI, also run these fully MariaDB specific build jobs

fresh install:
  stage: test
  dependencies:
    - build
  image: debian:${RELEASE}
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mariadb status # There is no init.d/mysql in MariaDB 10.5
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - mariadb --skip-column-names -e "select @@version, @@version_comment" # Show version
    - echo 'SHOW DATABASES;' | mariadb # List databases
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

mariadb-10.5 Sid upgrade:
  stage: upgrade in Sid
  dependencies:
    - build
  image: debian:${RELEASE}
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    # Install almost everything currently in Debian Sid
    - apt-get install -y 'default-mysql*' 'mariadb-*' libmariadb3 'libmariadb-*' 'libmariadbd*' 'libmariadbclient-*'
    # Verify installation of MariaDB currently in Debian Sid
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    - mariadb --skip-column-names -e "select @@version, @@version_comment"
    - echo 'SHOW DATABASES;' | mysql
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb || true # Allow to proceed so debug artifacts get collected
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - mariadb --skip-column-names -e "select @@version, @@version_comment" # Show version
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

mariadb-10.3 Buster to mariadb-10.5 upgrade:
  stage: upgrade from Buster/Stretch
  dependencies:
    - build
  image: debian:buster
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    # Install almost everything currently in Debian Buster
    - apt-get install -y 'default-mysql*' 'mariadb-*' libmariadb3 'libmariadb-*' 'libmariadbd*' 'libmariadbclient-*'
    # Verify installation of MariaDB from Buster
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    - mysql --skip-column-names -e "select @@version, @@version_comment"
    - echo 'SHOW DATABASES;' | mysql
    # Install MariaDB built in this commit
    - sed 's/buster/sid/g' -i /etc/apt/sources.list # Enable next Debian release
    - sed '/sid-updates/d' -i /etc/apt/sources.list # Remove repositories that don't exist for Sid
    - sed '/security/d' -i /etc/apt/sources.list # Remove repositories that don't exist for Sid
    - apt-get update; apt-get install -y apt # Uprade minimal stack first
    - apt-get install -y ./*.deb || true # Allow to proceed so debug artifacts get collected
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - mariadb --skip-column-names -e "select @@version, @@version_comment" # Show version
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

mariadb-10.1 Stretch to mariadb-10.5 upgrade:
  stage: upgrade from Buster/Stretch
  dependencies:
    - build
  image: debian:stretch
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    # Install almost everything currently in Debian Stretch
    - apt-get install -y 'default-mysql*' 'mariadb-*' 'libmariadbd*' 'libmariadbclient*'
    # Verify installation of MariaDB from Stretch
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    - mysql --skip-column-names -e "select @@version, @@version_comment"
    - echo 'SHOW DATABASES;' | mysql
    # Install MariaDB built in this commit
    - sed 's/stretch/sid/g' -i /etc/apt/sources.list # Enable next Debian release
    - sed '/sid-updates/d' -i /etc/apt/sources.list # Remove repositories that don't exist for Sid
    - sed '/security/d' -i /etc/apt/sources.list # Remove repositories that don't exist for Sid
    - apt-get update; apt-get install -y apt # Uprade minimal stack first
    - apt-get install -y ./*.deb || true # Allow to proceed so debug artifacts get collected
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - mariadb --skip-column-names -e "select @@version, @@version_comment" # Show version
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

test basic features:
  stage: test
  dependencies:
    - build
  image: debian:${RELEASE}
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mariadb status # There is no init.d/mysql in MariaDB 10.5
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases
    # Print info about server
    - mariadb --skip-column-names -e "select @@version, @@version_comment"
    - mariadb --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines order by engine" | sort
    - mariadb --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins order by plugin_name, plugin_library"
    # Test various features
    - mariadb -e "CREATE DATABASE db"
    - mariadb -e "CREATE TABLE db.t_innodb(a1 SERIAL, c1 CHAR(8)) ENGINE=InnoDB; INSERT INTO db.t_innodb VALUES (1,'"'"'foo'"'"'),(2,'"'"'bar'"'"')"
    - mariadb -e "CREATE TABLE db.t_myisam(a2 SERIAL, c2 CHAR(8)) ENGINE=MyISAM; INSERT INTO db.t_myisam VALUES (1,'"'"'foo'"'"'),(2,'"'"'bar'"'"')"
    - mariadb -e "CREATE TABLE db.t_aria(a3 SERIAL, c3 CHAR(8)) ENGINE=Aria; INSERT INTO db.t_aria VALUES (1,'"'"'foo'"'"'),(2,'"'"'bar'"'"')"
    - mariadb -e "CREATE TABLE db.t_memory(a4 SERIAL, c4 CHAR(8)) ENGINE=MEMORY; INSERT INTO db.t_memory VALUES (1,'"'"'foo'"'"'),(2,'"'"'bar'"'"')"
    - mariadb -e "CREATE ALGORITHM=MERGE VIEW db.v_merge AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
    - mariadb -e "CREATE ALGORITHM=TEMPTABLE VIEW db.v_temptable AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
    - mariadb -e "CREATE PROCEDURE db.p() SELECT * FROM db.v_merge"
    - mariadb -e "CREATE FUNCTION db.f() RETURNS INT DETERMINISTIC RETURN 1"
    # Test that the features still work (this step can be done e.g. after an upgrade)
    - mariadb -e "SHOW TABLES IN db"
    - mariadb -e "SELECT * FROM db.t_innodb; INSERT INTO db.t_innodb VALUES (3,'"'"'foo'"'"'),(4,'"'"'bar'"'"')"
    - mariadb -e "SELECT * FROM db.t_myisam; INSERT INTO db.t_myisam VALUES (3,'"'"'foo'"'"'),(4,'"'"'bar'"'"')"
    - mariadb -e "SELECT * FROM db.t_aria; INSERT INTO db.t_aria VALUES (3,'"'"'foo'"'"'),(4,'"'"'bar'"'"')"
    - mariadb -e "SELECT * FROM db.t_memory; INSERT INTO db.t_memory VALUES (3,'"'"'foo'"'"'),(4,'"'"'bar'"'"')"
    - mariadb -e "SELECT COUNT(*) FROM db.v_merge"
    - mariadb -e "SELECT COUNT(*) FROM db.v_temptable"
    - mariadb -e "CALL db.p()"
    - mariadb -e "SELECT db.f()"
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

# Build a piece of software that was designed for libmysqlclient-dev but using the
# libmariadb-dev-compat layer. Should always end up using libmariadb.so.3 run-time.
build mariadbclient consumer Python-MySQLdb:
  stage: test
  dependencies:
    - build
  image: debian:${RELEASE}
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - mkdir -p debug # Ensure dir exists before using it
    - apt-get update
    - apt-get install -y pkg-config ./libmariadb-dev*.deb ./libmariadb3_*.deb ./mariadb-common*.deb
    - pkg-config --cflags --libs mysqlclient # See what MySQLdb builds with
    - apt-get install -y python3-pip
    - pip3 install mysqlclient # Compiles module against libmysqlclient
    - apt-get purge -y libmariadb-dev # Not needed for run-time
    - python3 -c "import MySQLdb; print(MySQLdb.get_client_info())"
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

libmysql* to libmariadb* upgrade:
  stage: upgrade in Sid
  dependencies:
    - build
  image: debian:${RELEASE}
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - dpkg -l | grep -iE 'maria|mysql|galera' || true
    - apt-get update
    # Install all libmysql* available in Debian unstable
    - apt-get install -y pkg-config libmysqlclient-dev
    - pkg-config --list-all
    - pkg-config --cflags mysqlclient # mysqlclient.pc from original package
    - apt-get install -y ./libmariadb3_*.deb ./mariadb-common_*.deb
    - pkg-config --list-all
    - apt-get install -y ./libmariadb-dev_*.deb
    - pkg-config --list-all
    - apt-get install -y ./libmariadb-dev-compat_*.deb
    - pkg-config --cflags mysqlclient # mysqlclient.pc from compat package
    - pkg-config --list-all
    - apt-get install -y ./libmariadbd19_*.deb
    - pkg-config --list-all
    - apt-get install -y ./libmariadbd-dev_*.deb
    - pkg-config --list-all
    - apt-get install -y default-libmysqlclient-dev default-libmysqld-dev
    - ldconfig -p | grep -e mariadb -e mysql
    - pkg-config --list-all
    - pkg-config --cflags --libs mysqlclient
    - pkg-config --cflags --libs libmariadb
    - pkg-config --cflags --libs mariadb
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

default-libmysqlclient-dev Sid upgrade:
  stage: upgrade in Sid
  dependencies:
    - build
  image: debian:${RELEASE}
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - dpkg -l | grep -iE 'maria|mysql|galera' || true
    - apt-get update
    - apt-get install -y pkg-config default-libmysqlclient-dev default-libmysqld-dev
    - pkg-config --list-all
    - apt-get install -y ./libmariadb3_*.deb ./libmariadb-dev_*.deb ./libmariadb-dev-compat_*.deb ./libmariadbd19_*.deb ./libmariadbd-dev_*.deb ./mariadb-common_*.deb
    - ldconfig -p # | grep -e mariadb -e mysql
    - pkg-config --list-all
    - pkg-config --cflags --libs mysqlclient
    - pkg-config --cflags --libs libmariadb
    - pkg-config --cflags --libs mariadb
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

default-libmysqlclient-dev Buster upgrade:
  stage: upgrade from Buster/Stretch
  dependencies:
    - build
  image: debian:buster
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - dpkg -l | grep -iE 'maria|mysql|galera' || true
    - apt-get update
    - apt-get install -y pkg-config default-libmysqlclient-dev
    - pkg-config --list-all
    - echo 'deb http://deb.debian.org/debian sid main' > /etc/apt/sources.list
    - apt-get update; apt-get install -y apt # Uprade minimal stack first
    - apt-get install -y ./libmariadb3_*.deb ./libmariadbclient-dev_*.deb ./libmariadb-dev_*.deb ./libmariadb-dev-compat_*.deb ./libmariadbd19_*.deb ./libmariadbd-dev_*.deb ./mariadb-common_*.deb
    - ldconfig -p # | grep -e mariadb -e mysql
    - pkg-config --list-all
    - pkg-config --cflags --libs mysqlclient
    - pkg-config --cflags --libs libmariadb
    - pkg-config --cflags --libs mariadb
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

default-libmysqlclient-dev Stretch upgrade:
  stage: upgrade from Buster/Stretch
  dependencies:
    - build
  image: debian:stretch
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - dpkg -l | grep -iE 'maria|mysql|galera' || true
    - apt-get update
    - apt-get install -y pkg-config default-libmysqlclient-dev
    - pkg-config --list-all
    - echo 'deb http://deb.debian.org/debian sid main' > /etc/apt/sources.list
    - apt-get update; apt-get install -y apt # Uprade minimal stack first
    - apt-get install -y ./libmariadb3_*.deb ./libmariadbclient-dev_*.deb ./libmariadb-dev_*.deb ./libmariadb-dev-compat_*.deb ./libmariadbd19_*.deb ./libmariadbd-dev_*.deb ./mariadb-common_*.deb
    - ldconfig -p # | grep -e mariadb -e mysql
    - pkg-config --list-all
    - pkg-config --cflags --libs mysqlclient
    - pkg-config --cflags --libs libmariadb
    - pkg-config --cflags --libs mariadb
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

mariadb-connector-c Stretch upgrade:
  stage: upgrade from Buster/Stretch
  dependencies:
    - build
  image: debian:stretch
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - dpkg -l | grep -iE 'maria|mysql|galera' || true
    - apt-get update
    - apt-get install -y pkg-config libmariadb2 libmariadb-dev libmariadb-dev-compat
    - pkg-config --list-all
    - echo 'deb http://deb.debian.org/debian sid main' > /etc/apt/sources.list
    - apt-get update; apt-get install -y apt # Uprade minimal stack first
    - apt-get install -y ./libmariadb3_*.deb ./libmariadbclient-dev_*.deb ./libmariadb-dev_*.deb ./libmariadb-dev-compat_*.deb ./libmariadbd19_*.deb ./libmariadbd-dev_*.deb ./mariadb-common_*.deb
    - ldconfig -p # | grep -e mariadb -e mysql
    - pkg-config --list-all
    - pkg-config --cflags --libs mysqlclient
    - pkg-config --cflags --libs libmariadb
    - pkg-config --cflags --libs mariadb
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

# Upgrading from MySQL 8.0 with datadir in place is not possible. Users need to do a data dump.
# The Debian maintainer scripts detect this situation and simply moves old datadir aside and start fresh.
mysql-8.0 Sid to mariadb-10.5 upgrade:
  stage: upgrade in Sid
  dependencies:
    - build
  image: debian:sid
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    - apt-get install -y mysql-server
    # Verify installation of MySQL from Sid
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mysql
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - sleep 5 # Give the mysql_upgrade a bit of time to complete before querying the server
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

# Upgrading from MySQL 8.0 with datadir in place is not possible. Users need to do a data dump.
# The Debian maintainer scripts detect this situation and simply moves old datadir aside and start fresh.
mysql-8.0 Focal to mariadb-10.5 upgrade:
  stage: upgrade extras
  dependencies:
    - build buster-backports
  image: debian:buster
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    # Add Ubuntu Focal archive keys and repository
    - apt-get update
    - apt-get install --no-install-recommends --yes gpg gpg-agent dirmngr ca-certificates # Bare minimal (<4MB) for apt-key to work
    - apt-key adv --recv-keys --keyserver hkps://keyserver.ubuntu.com:443 871920D1991BC93C 3B4FE6ACC0B21F32
    - echo 'deb http://archive.ubuntu.com/ubuntu/ focal main restricted' > /etc/apt/sources.list.d/ubuntu.list
    - apt-get update
    - apt-get install -y mysql-server
    # Verify installation of MySQL from Ubuntu Focal
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mysql
    # Enable backports to make galera-4 available
    - echo 'deb http://deb.debian.org/debian buster-backports main' > /etc/apt/sources.list.d/backports.list && apt-get update
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - sleep 5 # Give the mysql_upgrade a bit of time to complete before querying the server
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

mysql-5.7 Bionic to mariadb-10.5 upgrade:
  stage: upgrade extras
  dependencies:
    - build stretch-backports
  image: debian:stretch
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    # Add Ubuntu Focal archive keys and repository
    - apt-get update
    - apt-get install --no-install-recommends --yes gpg gpg-agent dirmngr ca-certificates # Bare minimal (<4MB) for apt-key to work
    - apt-key adv --recv-keys --keyserver hkps://keyserver.ubuntu.com:443 871920D1991BC93C 3B4FE6ACC0B21F32
    - echo 'deb http://archive.ubuntu.com/ubuntu/ bionic main restricted' > /etc/apt/sources.list.d/ubuntu.list
    - apt-get update
    - apt-get install -y mysql-server
    # Verify installation of MySQL from Ubuntu Bionic
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mysql
    # Enable backports to make libzstd1, rocksdb-tools
    - echo 'deb http://deb.debian.org/debian stretch-backports main' >> /etc/apt/sources.list.d/backports.list
    # Enable backports to make galera-4 available
    - echo 'deb http://deb.debian.org/debian stretch-backports-sloppy main' >> /etc/apt/sources.list.d/backports.list && apt-get update
    # Remove plugin that requires libcurl4, not available in Debian Stretch
    - rm mariadb-plugin-s3*.deb
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - sleep 5 # Give the mysql_upgrade a bit of time to complete before querying the server
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

mariadb.org-10.5 to mariadb-10.5 upgrade:
  stage: upgrade extras
  dependencies:
    - build
  image: debian:sid
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    - apt install -y curl
    - curl -sS https://mariadb.org/mariadb_release_signing_key.asc -o /etc/apt/trusted.gpg.d/mariadb.asc
    - echo 'deb [arch=amd64,i386] http://mirror.one.com/mariadb/repo/10.5/debian sid main' > /etc/apt/sources.list.d/mariadb.list
    - apt-get update
    - apt-get install -y mariadb-server-10.5
    # Verify installation of MySQL from Sid
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mariadb status
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mysql
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mariadb status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - sleep 5 # Give the mysql_upgrade a bit of time to complete before querying the server
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

mariadb.org-10.4 to mariadb-10.5 upgrade:
  stage: upgrade extras
  dependencies:
    - build
  image: debian:sid
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    - apt install -y curl systemctl # systemctl shim needed on platforms that don't have systemd
    - curl -sS https://mariadb.org/mariadb_release_signing_key.asc -o /etc/apt/trusted.gpg.d/mariadb.asc
    - echo 'deb [arch=amd64,i386] http://mirror.one.com/mariadb/repo/10.4/debian sid main' > /etc/apt/sources.list.d/mariadb.list
    - apt-get update
    - apt-get install -y mariadb-server-10.4
    # Verify installation of MySQL from Sid
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    # MariaDB.org version of 10.4 and early 10.5 do not install an init file, so
    # it must be installed here manually
    - cp /usr/share/mysql/mysql.init /etc/init.d/mysql; chmod +x /etc/init.d/mysql; service mysql start; sleep 5
    - service mysql status
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mysql
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - service mariadb status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - sleep 5 # Give the mysql_upgrade a bit of time to complete before querying the server
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

mariadb.org-10.3 to mariadb-10.5 upgrade:
  stage: upgrade extras
  dependencies:
    - build
  image: debian:sid
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    - apt install -y curl
    - curl -sS https://mariadb.org/mariadb_release_signing_key.asc -o /etc/apt/trusted.gpg.d/mariadb.asc
    - echo 'deb [arch=amd64,i386] http://mirror.one.com/mariadb/repo/10.3/debian sid main' > /etc/apt/sources.list.d/mariadb.list
    - apt-get update
    - apt-get install -y mariadb-server-10.3
    # Verify installation of MySQL from Sid
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    # prepending with --defaults-file=/etc/mysql/debian.cnf is needed in upstream 5.5–10.3
    - mysql --defaults-file=/etc/mysql/debian.cnf --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql --defaults-file=/etc/mysql/debian.cnf -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql --defaults-file=/etc/mysql/debian.cnf -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mysql --defaults-file=/etc/mysql/debian.cnf
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - sleep 5 # Give the mysql_upgrade a bit of time to complete before querying the server
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

mariadb.org-10.2 to mariadb-10.5 upgrade:
  stage: upgrade extras
  dependencies:
    - build
  image: debian:sid
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    - apt install -y curl
    - curl -sS https://mariadb.org/mariadb_release_signing_key.asc -o /etc/apt/trusted.gpg.d/mariadb.asc
    - echo 'deb [arch=amd64,i386] http://mirror.one.com/mariadb/repo/10.2/debian sid main' > /etc/apt/sources.list.d/mariadb.list
    - apt-get update
    - apt-get install -y mariadb-server-10.2
    # Verify installation of MySQL from Sid
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    # prepending with --defaults-file=/etc/mysql/debian.cnf is needed in upstream 5.5–10.3
    - mysql --defaults-file=/etc/mysql/debian.cnf --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql --defaults-file=/etc/mysql/debian.cnf -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql --defaults-file=/etc/mysql/debian.cnf -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mysql --defaults-file=/etc/mysql/debian.cnf
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - sleep 5 # Give the mysql_upgrade a bit of time to complete before querying the server
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/

mysql.com-5.7 to mariadb-10.5 upgrade (MDEV-22678):
  stage: upgrade extras
  dependencies:
    - build buster-backports
  image: debian:buster
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    - apt-get install --no-install-recommends --yes gpg gpg-agent dirmngr ca-certificates # Bare minimal (<4MB) for apt-key to work
    - apt-key adv --recv-keys --keyserver hkps://keyserver.ubuntu.com:443 8C718D3B5072E1F5
    - echo 'deb https://repo.mysql.com/apt/debian/ buster mysql-5.7' > /etc/apt/sources.list.d/mysql.list
    - apt-get update
    - apt-get install -y mysql-server
    # Verify installation of MySQL Community Edition
    - dpkg -l | grep -iE 'maria|mysql|galera'
    - service mysql status
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mysql
    # Enable backports to make galera-4 available
    - echo 'deb http://deb.debian.org/debian buster-backports main' >> /etc/apt/sources.list.d/backports.list && apt-get update
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera'
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - sleep 5 # Give the mysql_upgrade a bit of time to complete before querying the server
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
    GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/
  allow_failure: true

percona-xtradb-5.7 to mariadb-10.5 upgrade (MDEV-22679):
  stage: upgrade extras
  dependencies:
    - build buster-backports
  image: debian:buster
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    - apt-get install --no-install-recommends --yes gpg gpg-agent dirmngr ca-certificates # Bare minimal (<4MB) for apt-key to work
    - apt-key adv --recv-keys --keyserver hkps://keyserver.ubuntu.com:443 9334A25F8507EFA5
    - echo 'deb https://repo.percona.com/apt/ buster main' > /etc/apt/sources.list.d/mysql.list
    - apt-get update
    - apt-get install -y percona-xtradb-cluster-57
    # Verify installation of MySQL
    - dpkg -l | grep -iE 'maria|mysql|galera'
    - service mysql status
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mysql
    # Enable backports to make galera-4 available
    - echo 'deb http://deb.debian.org/debian buster-backports main' > /etc/apt/sources.list.d/backports.list && apt-get update
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera'
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list || true # Ignore errors about "no such file or directory"
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - sleep 5 # Give the mysql_upgrade a bit of time to complete before querying the server
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
    GIT_STRATEGY: none
  except:
    variables:
      - $CI_COMMIT_TAG != null && $SALSA_CI_ENABLE_PIPELINE_ON_TAGS !~ /^(1|yes|true)$/
  allow_failure: true
