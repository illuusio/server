From: https://github.com/MariaDB/server/pull/979 modified to be more minimal
From. https://github.com/MariaDB/server/commit/970984e9f9b385d7a64d896baa437a40d65d3f2f
Author: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
Date: Sat, 1 Dec 2018 10:34:01 +0100
Subject: [PATCH] Link against libatomic on platforms missing 64-bit atomics

Some architectures require linking against libatomic for
using 64-bit atomic operations like __atomic_load_8. Due
to a bug in gcc, linking against libatomic is not happening
automatically when using C11 code.

See: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81358

Revert "MDEV-23051: riscv64 fails build (atomics)"
This reverts commit 201620f82d16fc1436fb089096dd9f5c4ad161ef.

Atomics libraries are now global.

Rework of global check to include compile and link.

Tested on AIX7.1

cmake -UHAVE_ATOMIC_ADD_FETCH_WITH_LIBATOMIC  -UHAVE_ATOMIC_ADD_FETCH .
-- Running cmake version 3.16.0
-- MariaDB 10.3.25
getconf: specified variable is not valid on this system
-- Performing Test HAVE_ATOMIC_ADD_FETCH
-- Performing Test HAVE_ATOMIC_ADD_FETCH - Failed
-- Performing Test HAVE_ATOMIC_ADD_FETCH_WITH_LIBATOMIC
-- Performing Test HAVE_ATOMIC_ADD_FETCH_WITH_LIBATOMIC - Success

closes #979
---
 configure.cmake                     | 24 ++++++++++++++++++++++++
 storage/rocksdb/CMakeLists.txt      |  7 -------
 storage/rocksdb/build_rocksdb.cmake |  4 ----
 3 files changed, 24 insertions(+), 11 deletions(-)

--- a/configure.cmake
+++ b/configure.cmake
@@ -859,6 +859,30 @@ MARK_AS_ADVANCED(NO_ALARM)
 
 
 CHECK_CXX_SOURCE_COMPILES("
+#include <cstdint>
+int main() {
+  uint64_t x = 1;
+  __atomic_add_fetch(&x, 0, __ATOMIC_RELAXED);
+  return x;
+}
+" HAVE_ATOMIC_ADD_FETCH)
+IF(NOT HAVE_ATOMIC_ADD_FETCH)
+  SET(SAVE_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
+  SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} atomic)
+  CHECK_CXX_SOURCE_COMPILES("
+  #include <cstdint>
+  int main() {
+    uint64_t x = 1;
+    __atomic_add_fetch(&x, 0, __ATOMIC_RELAXED);
+    return x;
+  }
+  " HAVE_ATOMIC_ADD_FETCH_WITH_LIBATOMIC)
+  IF(NOT HAVE_ATOMIC_ADD_FETCH_WITH_LIBATOMIC)
+    # revert the required libraries if unsuccessful
+    SET(CMAKE_REQUIRED_LIBRARIES ${SAVE_CMAKE_REQUIRED_LIBRARIES})
+  ENDIF()
+ENDIF()
+CHECK_CXX_SOURCE_COMPILES("
 int main()
 {
   long long int var= 1;
--- a/storage/rocksdb/CMakeLists.txt
+++ b/storage/rocksdb/CMakeLists.txt
@@ -112,15 +112,9 @@ SET(ROCKSDB_SE_SOURCES
 # This is a strong requirement coming from RocksDB. No conditional checks here.
 #ADD_DEFINITIONS(-DROCKSDB_PLATFORM_POSIX -DROCKSDB_LIB_IO_POSIX
 #)
-if(CMAKE_SYSTEM_PROCESSOR STREQUAL "riscv64")
-  SET(ATOMIC_EXTRA_LIBS -latomic)
-else()
-  SET(ATOMIC_EXTRA_LIBS)
-endif()
 
 MYSQL_ADD_PLUGIN(rocksdb ${ROCKSDB_SE_SOURCES} MODULE_ONLY STORAGE_ENGINE
                  MODULE_OUTPUT_NAME ha_rocksdb
-                 LINK_LIBRARIES ${ATOMIC_EXTRA_LIBS}
                  COMPONENT rocksdb-engine)
 
 IF(NOT TARGET rocksdb)
@@ -171,7 +165,6 @@ TARGET_LINK_LIBRARIES(rocksdb_aux_lib ro
 if (UNIX AND NOT APPLE)
   TARGET_LINK_LIBRARIES(rocksdb_aux_lib -lrt)
 endif()
-TARGET_LINK_LIBRARIES(rocksdb_aux_lib ${ATOMIC_EXTRA_LIBS})
 
 # IF (WITH_JEMALLOC)
 #  FIND_LIBRARY(JEMALLOC_LIBRARY
--- a/storage/rocksdb/build_rocksdb.cmake
+++ b/storage/rocksdb/build_rocksdb.cmake
@@ -128,10 +128,6 @@ if(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64
   ADD_DEFINITIONS(-DHAVE_POWER8 -DHAS_ALTIVEC)
 endif(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64")
 
-if(CMAKE_SYSTEM_PROCESSOR STREQUAL "riscv64")
- set(SYSTEM_LIBS ${SYSTEM_LIBS} -latomic)
-endif()
-
 option(WITH_FALLOCATE "build with fallocate" ON)
 
 if(WITH_FALLOCATE AND UNIX)
