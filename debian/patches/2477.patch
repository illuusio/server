Origin: https://github.com/MariaDB/server/pull/2477
Author: Daniel Black <daniel@mariadb.org>
Subject: [PATCH] MDEV-30554 RockDB libatomic linking on riscv64

From 845e00f06c14b319e7c8511329f2d6f5afc82fbb Mon Sep 17 00:00:00 2001
From: Daniel Black <daniel@mariadb.org>
Date: Fri, 3 Feb 2023 11:51:20 +1100
Subject: [PATCH] MDEV-30554 RockDB libatomic linking on riscv64

The existing storage/rocksdb/CMakeCache.txt defined
ATOMIC_EXTRA_LIBS when atomics where required. This was
determined by the toplevel configure.cmake test
(HAVE_GCC_C11_ATOMICS_WITH_LIBATOMIC).

As build_rocksdb.cmake is included after ATOMIC_EXTRA_LIBS
was set, we just need to use it. As such no riscv64
specific macro is needed in build_rocksdb.cmake.

As highlighted by Gianfranco Costamagna (@LocutusOfBorg)
in #2472 overwriting SYSTEM_LIBS was problematic.
This is corrected in case in future SYSTEM_LIBS is changed
elsewhere.

This is designed to permanently fix https://bugs.debian.org/1024041
---
 storage/rocksdb/build_rocksdb.cmake | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

--- a/storage/rocksdb/build_rocksdb.cmake
+++ b/storage/rocksdb/build_rocksdb.cmake
@@ -131,10 +131,6 @@ if(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64
   ADD_DEFINITIONS(-DHAVE_POWER8 -DHAS_ALTIVEC)
 endif(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64|powerpc64")
 
-if(CMAKE_SYSTEM_PROCESSOR STREQUAL "riscv64")
- set(SYSTEM_LIBS ${SYSTEM_LIBS} -latomic)
-endif()
-
 option(WITH_FALLOCATE "build with fallocate" ON)
 
 if(WITH_FALLOCATE AND UNIX)
@@ -163,9 +159,9 @@ include_directories(SYSTEM ${ROCKSDB_SOU
 
 find_package(Threads REQUIRED)
 if(WIN32)
-  set(SYSTEM_LIBS ${SYSTEM_LIBS} Shlwapi.lib Rpcrt4.lib)
+  set(SYSTEM_LIBS ${SYSTEM_LIBS} ${ATOMIC_EXTRA_LIBS} Shlwapi.lib Rpcrt4.lib)
 else()
-  set(SYSTEM_LIBS ${CMAKE_THREAD_LIBS_INIT} ${LIBRT} ${CMAKE_DL_LIBS})
+  set(SYSTEM_LIBS ${SYSTEM_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${LIBRT} ${CMAKE_DL_LIBS} ${ATOMIC_EXTRA_LIBS})
 endif()
 
 set(ROCKSDB_LIBS rocksdblib})
